{"name":"Jaylist","body":"# jaylist\r\na simple wrapper for javascript's built-in hash storage. \r\nMuch of the functionality was inspired by Python's dictionary.\r\n\r\n## demo\r\n\r\n\t\t// let's create a list\r\n\t\tvar jaylist = list();\r\n\t\t\r\n\t\t// and add some items\r\n\t\tjaylist.add(\"here\", \"strings\");\r\n\t\tjaylist.add(\"there\", 1638423);\r\n\t\tjaylist.add(\"these\", [1,2,3,4,5]);\r\n\t\t\r\n\t\t// let's view the keys in the list\r\n\t\t// -> [\"here\", \"there\", \"these\"]\r\n\t\tjaylist.keys();\r\n\r\n\t\t// let's view the values in the list\r\n\t\t// -> [\"strings\", 1638423]\r\n\t\tjaylist.values();\r\n\r\n\t\t// let's remove an item\r\n\t\tjaylist.remove(\"here\");\r\n\r\n\t\t// trying to retrieve an item that doesn't exist yields undefined\r\n\t\t// -> undefined\r\n\t\tjaylist.get(\"here\");\r\n\r\n\t\t// -> 1638423\r\n\t\tjaylist.get(\"there\");\r\n\r\n\t\t// deep copy a list\r\n\t\tvar beelist = jaylist.copy();\r\n\r\n\t\t// list equality\r\n\t\t// -> true\r\n\t\tjaylist.isEqual(beelist);\r\n\r\n\t\t// empty a list\r\n\t\tjaylist.clear();\r\n\r\n\t\t// iteration with a callback \r\n\t\tbeelist.each(function(key){console.log(key);});\r\n\r\n\t\t// iteration with a loop\r\n\t\tvar item;\r\n\t\twhile (item = beelist.next()) {\r\n\t\t\t\tconsole.log(item);\r\n\t\t}\t\t\r\n\t\t\r\n\t\t// update a list with the contents of another\r\n\t\tjaylist.update(beelist);\r\n\r\n## Functions:\r\n###Create the list:\r\n\r\n    var jaylist = list(); \r\n\r\n   \r\n###Add a value to the list:\r\n\r\n#### add(key, value)\r\n--Insert an object into the list, overwriting any value already assigned to the key. Returns the value upon successful addition.\r\n\r\n    jaylist.add(\"key\", value);\r\n\r\n   \r\n###Get the value from the list:\r\n\r\n#### get(key)\r\n--Returns the value associated with key, undefined if the key has not been entered into the list.\r\n\r\n    var val = jaylist.get(\"key\"); \r\n\r\n  \r\n###Remove the value from the list:\r\n\r\n#### remove(key)\r\n--Removes the object from the list. Returns undefined if no value is assigned to the key. Upon successful removal, it returns the value removed. A list or array of keys may also be passed.\r\n\r\n    jaylist.remove(\"key\");\r\n\r\n\r\n###Get the keys in the list:\r\n\r\n#### keys()\r\n--Returns an array of the keys in the list.\r\n\r\n    var keys = jaylist.keys();\r\n\r\n\r\n###Get the values in the list:\r\n\r\n#### values()\r\n--Returns an array of the values in the list.\r\n\r\n    var values = jaylist.values();\r\n\r\n\r\n###Get the items in the list:\r\n\r\n#### items()\r\n--Returns an array of key-value pairs. [[key, value]]\r\n\r\n    var items = jaylist.items();\r\n\r\n\r\n###Get the length of the list:\r\n\r\n#### len() \r\n--Returns the number of elements in the list, 0 when empty.\r\n\r\n    var len = jaylist.len();    \r\n\r\n\r\n###Clear the list:\r\n\r\n#### clear()\r\n--Removes all the items from the list.\r\n\r\n    jaylist.clear();\r\n\r\n\r\n###Check if the list contains the key:\r\n    \r\n#### hasKey(key)\r\n-- Returns true if the list contains the key and false otherwise.\r\n\r\n    jaylist.hasKey(key);\r\n\r\n\r\n###Update a list with another list:\r\n    \r\n#### update(list)\r\n-- Adds the entries of the input list to the list.\r\n\r\n    jaylist.update(somelist);\r\n\r\n\r\n###Deep copy a list:\r\n\r\n#### copy()\r\n-- Returns a deep copy of the list.\r\n\r\n    var newlist = jaylist.copy();\r\n\r\n\r\n###Iterate through a list:\r\n\r\n#### each(callback)\r\n-- Iterates through each entry in the list, calling callback with parameter key for each value.\r\n\r\n    jaylist.each(function(key){somefunction(key);});\r\n\r\n\r\n###Iterate through a list:\r\n\r\n#### next()\r\n-- Iterates through each entry in the list, returning a key on each call. When the iteration is complete, next() returns undefined & the iteration can begin again.\r\n\r\n    while(jaylist.next()) {...}\r\n\r\n\r\n###Return an object representation of the list:\r\n\r\n#### object()\r\n-- Returns the list as an object of key-value pairs.\r\n\r\n    var obj = jaylist.object();\r\n\r\n\r\n###Check if two lists are equal:\r\n\t\r\n#### isEqual(list)\r\n-- Returns true if the lists are equivalent and false otherwise.\r\n\r\n    jaylist.isEqual(alist);\r\n\r\n\r\n","tagline":"jaylist is a very simple key-value list.","google":"UA-22784247-2","note":"Don't delete this file! It's used internally to help with page regeneration."}